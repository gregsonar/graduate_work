services:
  postgres_auth:
    build:
      context: .
      dockerfile: ./db/Dockerfile.postgres
    env_file: .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - auth_network
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  auth_migrations:
    build:
      context: .
      dockerfile: ./db/Dockerfile.migrations
    env_file: .env
    depends_on:
      postgres_auth:
        condition: service_healthy
    networks:
      - auth_network

  redis:
    image: redis:6.2-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - auth_network
      - payments_network # payments/docker-compose.autopayments.yml
    restart: unless-stopped

  auth_api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - DEBUG=${DEBUG}
#      - PYTHONPATH=/auth
    depends_on:
      postgres_auth:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://auth_api:8000/api/openapi.json" ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - auth_network
      - backend
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_OTLP_HTTP_PORT=4318
    networks:
      - auth_network
      - backend
    restart: unless-stopped

volumes:
  auth_postgres_data:
    name: auth_postgres_data
  redis_data:
    name: redis_data