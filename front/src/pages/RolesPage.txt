import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { rolesService } from '../api/services';
import { RoleResponse, UpdateRoleRequest, UserRoleAssignment } from '../types';

export function RolesPage() {
  const queryClient = useQueryClient();
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [newRole, setNewRole] = useState({ name: '', description: '' });
  const [error, setError] = useState<string | null>(null);
  const [selectedRole, setSelectedRole] = useState<RoleResponse | null>(null);
  const [userIds, setUserIds] = useState('');

  // Получение списка ролей
  const { data: rolesData, isLoading } = useQuery({
    queryKey: ['roles', currentPage, pageSize],
    queryFn: () => rolesService.getRoles(currentPage, pageSize),
    select: (response) => response.data,
  });

  // Получение пользователей роли
  const { data: roleUsers } = useQuery({
    queryKey: ['roleUsers', selectedRole?.id],
    queryFn: () => (selectedRole ? rolesService.getUsersByRole(selectedRole.id) : null),
    enabled: !!selectedRole,
  });

  // Создание роли
  const createRoleMutation = useMutation({
    mutationFn: (data: UpdateRoleRequest) => rolesService.createRole(data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['roles'] });
      setNewRole({ name: '', description: '' });
      setError(null);
    },
    onError: (error: any) => {
      setError(error.response?.data?.detail || 'Failed to create role');
    },
  });

  // Удаление роли
  const deleteRoleMutation = useMutation({
    mutationFn: (roleId: string) => rolesService.deleteRole(roleId),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['roles'] });
    },
  });

  // Назначение пользователей на роль
  const assignUsersMutation = useMutation({
    mutationFn: ({ roleId, userIds }: { roleId: string; userIds: string[] }) =>
      rolesService.assignUsersToRole(roleId, { user_ids: userIds }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['roleUsers'] });
      setUserIds('');
    },
  });

  // Удаление пользователей из роли
  const removeUsersMutation = useMutation({
    mutationFn: ({ roleId, userIds }: { roleId: string; userIds: string[] }) =>
      rolesService.removeUsersFromRole(roleId, { user_ids: userIds }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['roleUsers'] });
    },
  });

  const handleCreateRole = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newRole.name) return;
    createRoleMutation.mutate(newRole);
  };

  const handleDeleteRole = (roleId: string) => {
    if (window.confirm('Are you sure you want to delete this role?')) {
      deleteRoleMutation.mutate(roleId);
    }
  };

  const handleAssignUsers = (roleId: string) => {
    const userIdList = userIds.split(',').map((id) => id.trim());
    assignUsersMutation.mutate({ roleId, userIds: userIdList });
  };

  const handleRemoveUser = (roleId: string, userId: string) => {
    removeUsersMutation.mutate({ roleId, userIds: [userId] });
  };

  const handlePageChange = (newPage: number) => {
    setCurrentPage(newPage);
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '2rem' }}>
      <Card style={{ marginBottom: '2rem', padding: '1.5rem', borderRadius: '12px', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)' }}>
        <CardHeader>
          <CardTitle style={{ fontSize: '1.75rem', fontWeight: 'bold', color: '#333', textAlign: 'center' }}>
            Role Management
          </CardTitle>
        </CardHeader>
        <CardContent>
          {/* Форма создания роли */}
          <form onSubmit={handleCreateRole} style={{ display: 'flex', flexDirection: 'column', gap: '1rem', marginBottom: '2rem' }}>
            <Input
              value={newRole.name}
              onChange={(e) => setNewRole({ ...newRole, name: e.target.value })}
              placeholder="Role name"
              style={{
                padding: '0.75rem',
                border: '1px solid #ddd',
                borderRadius: '8px',
                fontSize: '1rem',
                transition: 'border-color 0.3s ease',
              }}
            />
            <Input
              value={newRole.description}
              onChange={(e) => setNewRole({ ...newRole, description: e.target.value })}
              placeholder="Description (optional)"
              style={{
                padding: '0.75rem',
                border: '1px solid #ddd',
                borderRadius: '8px',
                fontSize: '1rem',
                transition: 'border-color 0.3s ease',
              }}
            />
            <Button
              type="submit"
              disabled={createRoleMutation.isPending}
              style={{
                padding: '0.75rem',
                background: '#007bff',
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                fontSize: '1rem',
                cursor: 'pointer',
                transition: 'background 0.3s ease',
              }}
            >
              {createRoleMutation.isPending ? 'Creating...' : 'Create Role'}
            </Button>
            {error && (
              <Alert
                style={{
                  padding: '0.75rem',
                  borderRadius: '8px',
                  background: '#ffebee',
                  color: '#c62828',
                  border: '1px solid #ffcdd2',
                }}
              >
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
          </form>

          {/* Таблица ролей */}
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Description</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Users</TableHead>
                <TableHead>Created At</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {rolesData?.items.map((role: RoleResponse) => (
                <TableRow key={role.id}>
                  <TableCell>{role.name}</TableCell>
                  <TableCell>{role.description || '-'}</TableCell>
                  <TableCell>{role.is_active ? 'Active' : 'Inactive'}</TableCell>
                  <TableCell>
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button
                          variant="outline"
                          onClick={() => setSelectedRole(role)}
                          style={{
                            padding: '0.5rem 1rem',
                            border: '1px solid #007bff',
                            background: 'transparent',
                            color: '#007bff',
                            borderRadius: '8px',
                            fontSize: '0.9rem',
                            cursor: 'pointer',
                            transition: 'background 0.3s ease, color 0.3s ease',
                          }}
                        >
                          Manage Users ({role.users.length})
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>Manage Users for {role.name}</DialogTitle>
                          <DialogDescription>Add or remove users from this role</DialogDescription>
                        </DialogHeader>
                        <div style={{ marginBottom: '1rem' }}>
                          <Input
                            value={userIds}
                            onChange={(e) => setUserIds(e.target.value)}
                            placeholder="User IDs (comma-separated)"
                            style={{
                              width: '100%',
                              padding: '0.75rem',
                              border: '1px solid #ddd',
                              borderRadius: '8px',
                              fontSize: '1rem',
                              transition: 'border-color 0.3s ease',
                            }}
                          />
                          <Button
                            onClick={() => handleAssignUsers(role.id)}
                            disabled={assignUsersMutation.isPending}
                            style={{
                              marginTop: '0.5rem',
                              padding: '0.5rem 1rem',
                              background: '#007bff',
                              color: 'white',
                              border: 'none',
                              borderRadius: '8px',
                              fontSize: '0.9rem',
                              cursor: 'pointer',
                              transition: 'background 0.3s ease',
                            }}
                          >
                            Add Users
                          </Button>
                        </div>
                        <div>
                          <p style={{ fontWeight: 'bold', marginBottom: '0.5rem' }}>Current Users:</p>
                          <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
                            {role.users.map((user) => (
                              <li key={user.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
                                <span>{user.username}</span>
                                <Button
                                  onClick={() => handleRemoveUser(role.id, user.id)}
                                  disabled={removeUsersMutation.isPending}
                                  style={{
                                    padding: '0.25rem 0.75rem',
                                    background: '#e74c3c',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '8px',
                                    fontSize: '0.8rem',
                                    cursor: 'pointer',
                                    transition: 'background 0.3s ease',
                                  }}
                                >
                                  Remove
                                </Button>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </DialogContent>
                    </Dialog>
                  </TableCell>
                  <TableCell>{new Date(role.created_at).toLocaleDateString()}</TableCell>
                  <TableCell>
                    <Button
                      onClick={() => handleDeleteRole(role.id)}
                      disabled={deleteRoleMutation.isPending}
                      style={{
                        padding: '0.5rem 1rem',
                        background: '#e74c3c',
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        fontSize: '0.9rem',
                        cursor: 'pointer',
                        transition: 'background 0.3s ease',
                      }}
                    >
                      {deleteRoleMutation.isPending ? 'Deleting...' : 'Delete'}
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>

          {/* Пагинация */}
          {rolesData && (
            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginTop: '1.5rem' }}>
              <div>
                Rows per page:
                <select
                  value={pageSize}
                  onChange={(e) => setPageSize(Number(e.target.value))}
                  style={{
                    marginLeft: '0.5rem',
                    padding: '0.25rem',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    fontSize: '0.9rem',
                  }}
                >
                  <option value="10">10</option>
                  <option value="20">20</option>
                  <option value="50">50</option>
                </select>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                <Button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  style={{
                    padding: '0.25rem 0.75rem',
                    background: '#007bff',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    fontSize: '0.9rem',
                    cursor: 'pointer',
                    transition: 'background 0.3s ease',
                  }}
                >
                  Previous
                </Button>
                <span>
                  Page {currentPage} of {Math.ceil(rolesData.total / pageSize)}
                </span>
                <Button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage >= Math.ceil(rolesData.total / pageSize)}
                  style={{
                    padding: '0.25rem 0.75rem',
                    background: '#007bff',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    fontSize: '0.9rem',
                    cursor: 'pointer',
                    transition: 'background 0.3s ease',
                  }}
                >
                  Next
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}